#!/usr/bin/env node

const util = require('util');
const repl = require('repl');
const fs = require('fs');

const replServer = repl.start({ preview: false });

replServer.defineCommand('runUserCode', {
    help: '',
    action: function(file) {
      this.clearLine();
      // Clear repl variables and constants
      this.clearBufferedCommand();
      if (!this.useGlobal) {
        this.resetContext();
      }

      try {
        const stats = fs.statSync(file);
        if (stats && stats.isFile()) {
          const origWriter = this.writer;
          // Don't show return value
          this.writer = (output) => '';
          this.editorMode = true;
          const data = fs.readFileSync(file, 'utf8');
          this.write(data);
          this.editorMode = false;
          this.write('\n')
          // Restore showing of return value
          this.writer = origWriter;
        } else {
          this.outputStream.write(
            `Failed to load: ${file} is not a valid file`
          );
        }
      } catch (err) {
        this.outputStream.write(`Failed to load: ${file}. Err: ${err}`);
      }
      // Handle case where user has run a setTimeout with output and no specified time
      setTimeout(() => this.displayPrompt(), 300);
      this.displayPrompt();
      this.history = [];
    }
});

replServer.defineCommand('deleteHistory', {
    help: '',
    action: function () {
      this.clearLine();
      this.displayPrompt();
      this.history = [];
    }
});

replServer.defineCommand('help', {
  help: 'Print this help message',
  action: function() {
    const hide = ['runUserCode', 'deleteHistory'];
    const names = Object.keys(this.commands).sort();
    const longestNameLength = names.reduce(
      (max, name) => Math.max(max, name.length),
      0
    );
    for (let n = 0; n < names.length; n++) {
      const name = names[n];
      if (hide.includes(name)) {
        continue;
      }
      const cmd = this.commands[name];
      const spaces = ' '.repeat(longestNameLength - name.length + 3);
      const line = `.${name}${cmd.help ? spaces + cmd.help : ''}\n`;
      this.outputStream.write(line);
    }
    this.outputStream.write('\nPress ^C to abort current expression, ' +
      '^D to exit the repl\n');
    this.displayPrompt();
  }
});
